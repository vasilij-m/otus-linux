# This is a configuration file for mamonsu
# To get more information about mamonsu, visit https://postgrespro.ru/docs/postgrespro/12/mamonsu

#########  Connection parameters sections  ##############

# specify connection parameters for the Postgres cluster
# in the user, password, and database fields, you must specify the mamonsu_user, mamonsu_password,
# and the mamonsu_database used for bootstrap, respectively.
# if you skipped the bootstrap, specify a superuser credentials and the database to connect to.

[postgres]
enabled = True
user = {{ pgsql_mamonsu_user_name }}
password = {{ pgsql_mamonsu_user_password }}
database = {{ pgsql_mamonsu_database }}
host = {{ pgsql_mamonsu_host }}
port = {{ pgsql_mamonsu_port }}
application_name = {{ pgsql_mamonsu_application_name }}
query_timeout = {{ pgsql_mamonsu_query_timeout }}

# the address field must point to the running Zabbix server, while the client field must provide the name of
# the Zabbix host. You can find the list of hosts available for your account in the Zabbix web
# interface under Configuration > Hosts.

[zabbix]
enabled = True
client = localhost
address = 127.0.0.1
port = 10051

#########  General parameters sections  ############

# enable or disable collection of system metrics.

[system]
enabled = True

# control the queue size of the data to be sent to the Zabbix server

[sender]
queue = 2048

# specify the location of mamonsu and whether it is allowed to access metrics from the command line

[agent]
enabled = True
host = 127.0.0.1
port = 10052

# specify custom plugins to be added for metrics collection

[plugins]
enabled = False
directory = /etc/mamonsu/plugins

# enable storing the collected metric data in text files locally.

[metric_log]
enabled = False
directory = /var/log/mamonsu
max_size_mb = 1024

# specify logging settings for mamonsu

[log]
file = None
level = INFO
format = [%(levelname)s] %(asctime)s - %(name)s	-	%(message)s

#########  Individual Plugin Sections  ############

# to disable any plugin set the enabled option to False.
# modify collection interval for each plugin in the interval field.
# set customer parameters for some plugins in the individual section.
# below listed all available parameters for each plugin to modify.

[health]
max_memory_usage = 41943040
interval = 60

[bgwriter]
interval = 60

[connections]
percent_connections_tr = 90
interval = 60

[databases]
bloat_scale = 0.2
min_rows = 50
interval = 300

[pghealth]
uptime = 600
cache = 80
interval = 60

[instance]
interval = 60

[xlog]
lag_more_then_in_sec = 300
interval = 60

[pgstatstatement]
interval = 60

[pgbuffercache]
interval = 60

[pgwaitsampling]
interval = 60

[checkpoint]
max_checkpoint_by_wal_in_hour = 12
interval = 300

[oldest]
max_xid_age = 18000000
max_query_time = 18000
interval = 60

[pglocks]
interval = 60

[cfs]
force_enable = False
interval = 60

[archivecommand]
max_count_files = 2
interval = 60

[procstat]
interval = 60

[diskstats]
interval = 60

[disksizes]
vfs_percent_free = 10
vfs_inode_percent_free = 10
interval = 60

[memory]
interval = 60

[systemuptime]
up_time = 300
interval = 60

[openfiles]
interval = 60

[net]
interval = 60

[la]
interval = 60

[zbxsender]
interval = 10

[logsender]
interval = 2

[agentapi]
interval = 60

# Get age (in seconds) of the oldest running prepared transaction and number of all prepared transactions for two-phase commit.
# https://www.postgresql.org/docs/current/sql-prepare-transaction.html
# https://www.postgresql.org/docs/12/view-pg-prepared-xacts.html
# max_prepared_transaction_time - age of prepared transaction in seconds.
# If pgsql.prepared.oldest exceeds max_prepared_transaction_time the trigger fires.
[preparedtransaction]
max_prepared_transaction_time = 60
interval = 60

# Get size of backup catalogs stroring all WAL and backup files using pg_probackup
# (https://github.com/postgrespro/pg_probackup)
# Trigger fires if some backup has bad status e.g. (ERROR,CORRUPT,ORPHAN).
[pgprobackup]
enabled = False
interval = 300
backup_dirs = /backup_dir1,/backup_dir2
pg_probackup_path = /usr/bin/pg_probackup-11
